<?php
/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

namespace yii\console\controllers;

use Yii;
use yii\base\BaseObject;
use yii\helpers\Console;
use yii\helpers\VarDumper;

/**
 * MigrationLock
 *
 * @author Paul Klimov <klimov.paul@gmail.com>
 * @since 2.0.14
 */
class MigrationLock extends BaseObject
{
    /**
     * @var BaseMigrateController owner migrate controller.
     */
    public $controller;
    /**
     * @var string name of the file, which should be used for lock information storage.
     * Yii path aliases can be used for it, for example: '@app/migrations/lock.php'.
     * If not set file operations will be disabled.
     */
    public $filename;

    /**
     * @var array migration version aliases in format: `[stored-version => alias]`
     */
    private $_aliases;
    /**
     * @var array external migration copies in format: `[external-migration => internal-copy]`
     */
    private $_copies;


    /**
     * @return array
     */
    public function getAliases()
    {
        if ($this->_aliases === null) {
            $this->_aliases = [];
            $this->parse();
        }
        return $this->_aliases;
    }

    /**
     * @param array $aliases
     */
    public function setAliases(array $aliases)
    {
        $this->_aliases = $aliases;
    }

    /**
     * @return array
     */
    public function getCopies()
    {
        if ($this->_copies === null) {
            $this->_copies = [];
            $this->parse();
        }
        return $this->_copies;
    }

    /**
     * @param array $copies
     */
    public function setCopies(array $copies)
    {
        $this->_copies = $copies;
    }

    /**
     * Parse [[filename]] file populating internal properties.
     */
    protected function parse()
    {
        $this->_aliases = [];
        $this->_copies = [];

        if ($this->filename === null) {
            return;
        }

        $fileName = Yii::getAlias($this->filename);

        if (!file_exists($fileName)) {
            return;
        }

        $config = require $fileName;

        $this->setAliases($config['aliases']);
        $this->setCopies($config['copies']);
    }

    /**
     * Saves lock information into [[filename]].
     */
    public function save()
    {
        if ($this->filename === null) {
            return;
        }

        $fileName = Yii::getAlias($this->filename);

        if (file_exists($fileName)) {
            $config = require $fileName;
        } else {
            $config = [
                'aliases' => [],
                'copies' => [],
            ];
        }

        $aliases = array_merge($config['aliases'], $this->getAliases());
        $copies = array_merge($config['copies'], $this->getCopies());

        $hasChanges = empty($config['version']) || $aliases != $config['aliases'] || $copies != $config['copies'];

        if (!$hasChanges) {
            return;
        }

        ksort($aliases);
        ksort($copies);

        $config['version'] = Yii::getVersion();
        $config['aliases'] = $aliases;
        $config['copies'] = $copies;

        $config = VarDumper::dumpAsString($config);

        $fileContent = <<<PHP
<?php
/**
 * Migration lock file.
 *
 * This file is automatically generated by 'yii {$this->controller->id}' command.
 *
 * Aliases:
 * It contains the migration version aliases in format `[stored-version => alias]`.
 * You may modify this file specifying aliases for the migrations, which name has been changed.
 * For example: in case you have an old migration 'm20171203_000000_foo' renamed to 'app\migrations\M20171203000000Foo',
 * you should find the line with key 'm20171203_000000_foo' and specify 'app\migrations\M20171203000000Foo' as its value.
 *
 * ATTENTION: make sure this file is tracked by version control system (e.g. GIT, Mercurial, etc.) and you commit
 * its changes after migration application.
 *
 * NOTE: this file must be saved in UTF-8 encoding.
 */

return {$config};
PHP;

        $bytesWritten = file_put_contents($fileName, $fileContent, LOCK_EX);

        if ($bytesWritten > 0) {
            $this->controller->stdout("Lock file saved into '{$fileName}'. Do not forget to commit changes into your VCS.\n", Console::FG_GREEN);

            // invalidate script cache :
            if (function_exists('opcache_invalidate')) {
                opcache_invalidate($fileName, true);
            }
            if (function_exists('apc_delete_file')) {
                @apc_delete_file($fileName);
            }
        } else {
            $this->controller->stdout("Unable to save lock file into '{$fileName}'!\n", Console::FG_RED);
        }
    }
}